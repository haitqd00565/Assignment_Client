//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Assignment_Client.AdminServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Admin", Namespace="http://schemas.datacontract.org/2004/07/Assignment_WebService")]
    [System.SerializableAttribute()]
    public partial class Admin : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PhoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Phone {
            get {
                return this.PhoneField;
            }
            set {
                if ((this.PhoneField.Equals(value) != true)) {
                    this.PhoneField = value;
                    this.RaisePropertyChanged("Phone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CategoryPlace", Namespace="http://schemas.datacontract.org/2004/07/Assignment_WebService")]
    [System.SerializableAttribute()]
    public partial class CategoryPlace : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Image {
            get {
                return this.ImageField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageField, value) != true)) {
                    this.ImageField = value;
                    this.RaisePropertyChanged("Image");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Place", Namespace="http://schemas.datacontract.org/2004/07/Assignment_WebService")]
    [System.SerializableAttribute()]
    public partial class Place : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AvatarField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CategoryPlaceIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InformationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Avatar {
            get {
                return this.AvatarField;
            }
            set {
                if ((object.ReferenceEquals(this.AvatarField, value) != true)) {
                    this.AvatarField = value;
                    this.RaisePropertyChanged("Avatar");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CategoryPlaceId {
            get {
                return this.CategoryPlaceIdField;
            }
            set {
                if ((this.CategoryPlaceIdField.Equals(value) != true)) {
                    this.CategoryPlaceIdField = value;
                    this.RaisePropertyChanged("CategoryPlaceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Information {
            get {
                return this.InformationField;
            }
            set {
                if ((object.ReferenceEquals(this.InformationField, value) != true)) {
                    this.InformationField = value;
                    this.RaisePropertyChanged("Information");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Image", Namespace="http://schemas.datacontract.org/2004/07/Assignment_WebService")]
    [System.SerializableAttribute()]
    public partial class Image : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Image1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PlaceIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Image1 {
            get {
                return this.Image1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Image1Field, value) != true)) {
                    this.Image1Field = value;
                    this.RaisePropertyChanged("Image1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PlaceId {
            get {
                return this.PlaceIdField;
            }
            set {
                if ((this.PlaceIdField.Equals(value) != true)) {
                    this.PlaceIdField = value;
                    this.RaisePropertyChanged("PlaceId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AdminServiceReference.IAdminService")]
    public interface IAdminService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetAdminList", ReplyAction="http://tempuri.org/IAdminService/GetAdminListResponse")]
        Assignment_Client.AdminServiceReference.Admin[] GetAdminList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetAdminList", ReplyAction="http://tempuri.org/IAdminService/GetAdminListResponse")]
        System.Threading.Tasks.Task<Assignment_Client.AdminServiceReference.Admin[]> GetAdminListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/AddAdmin", ReplyAction="http://tempuri.org/IAdminService/AddAdminResponse")]
        bool AddAdmin(Assignment_Client.AdminServiceReference.Admin admin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/AddAdmin", ReplyAction="http://tempuri.org/IAdminService/AddAdminResponse")]
        System.Threading.Tasks.Task<bool> AddAdminAsync(Assignment_Client.AdminServiceReference.Admin admin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/UpdateAdmin", ReplyAction="http://tempuri.org/IAdminService/UpdateAdminResponse")]
        bool UpdateAdmin(Assignment_Client.AdminServiceReference.Admin admin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/UpdateAdmin", ReplyAction="http://tempuri.org/IAdminService/UpdateAdminResponse")]
        System.Threading.Tasks.Task<bool> UpdateAdminAsync(Assignment_Client.AdminServiceReference.Admin admin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/DeleteAdmin", ReplyAction="http://tempuri.org/IAdminService/DeleteAdminResponse")]
        bool DeleteAdmin(int idA);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/DeleteAdmin", ReplyAction="http://tempuri.org/IAdminService/DeleteAdminResponse")]
        System.Threading.Tasks.Task<bool> DeleteAdminAsync(int idA);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/LoginAdmin", ReplyAction="http://tempuri.org/IAdminService/LoginAdminResponse")]
        bool LoginAdmin(Assignment_Client.AdminServiceReference.Admin admin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/LoginAdmin", ReplyAction="http://tempuri.org/IAdminService/LoginAdminResponse")]
        System.Threading.Tasks.Task<bool> LoginAdminAsync(Assignment_Client.AdminServiceReference.Admin admin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetCatePlaceList", ReplyAction="http://tempuri.org/IAdminService/GetCatePlaceListResponse")]
        Assignment_Client.AdminServiceReference.CategoryPlace[] GetCatePlaceList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetCatePlaceList", ReplyAction="http://tempuri.org/IAdminService/GetCatePlaceListResponse")]
        System.Threading.Tasks.Task<Assignment_Client.AdminServiceReference.CategoryPlace[]> GetCatePlaceListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/AddCatePlace", ReplyAction="http://tempuri.org/IAdminService/AddCatePlaceResponse")]
        bool AddCatePlace(Assignment_Client.AdminServiceReference.CategoryPlace categoryPlace);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/AddCatePlace", ReplyAction="http://tempuri.org/IAdminService/AddCatePlaceResponse")]
        System.Threading.Tasks.Task<bool> AddCatePlaceAsync(Assignment_Client.AdminServiceReference.CategoryPlace categoryPlace);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/UpdateCatePlace", ReplyAction="http://tempuri.org/IAdminService/UpdateCatePlaceResponse")]
        bool UpdateCatePlace(Assignment_Client.AdminServiceReference.CategoryPlace categoryPlace);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/UpdateCatePlace", ReplyAction="http://tempuri.org/IAdminService/UpdateCatePlaceResponse")]
        System.Threading.Tasks.Task<bool> UpdateCatePlaceAsync(Assignment_Client.AdminServiceReference.CategoryPlace categoryPlace);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/DeleteCatePlace", ReplyAction="http://tempuri.org/IAdminService/DeleteCatePlaceResponse")]
        bool DeleteCatePlace(int idCP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/DeleteCatePlace", ReplyAction="http://tempuri.org/IAdminService/DeleteCatePlaceResponse")]
        System.Threading.Tasks.Task<bool> DeleteCatePlaceAsync(int idCP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetPlaceList", ReplyAction="http://tempuri.org/IAdminService/GetPlaceListResponse")]
        Assignment_Client.AdminServiceReference.Place[] GetPlaceList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetPlaceList", ReplyAction="http://tempuri.org/IAdminService/GetPlaceListResponse")]
        System.Threading.Tasks.Task<Assignment_Client.AdminServiceReference.Place[]> GetPlaceListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/AddPlace", ReplyAction="http://tempuri.org/IAdminService/AddPlaceResponse")]
        bool AddPlace(Assignment_Client.AdminServiceReference.Place place);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/AddPlace", ReplyAction="http://tempuri.org/IAdminService/AddPlaceResponse")]
        System.Threading.Tasks.Task<bool> AddPlaceAsync(Assignment_Client.AdminServiceReference.Place place);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/UpdatePlace", ReplyAction="http://tempuri.org/IAdminService/UpdatePlaceResponse")]
        bool UpdatePlace(Assignment_Client.AdminServiceReference.Place place);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/UpdatePlace", ReplyAction="http://tempuri.org/IAdminService/UpdatePlaceResponse")]
        System.Threading.Tasks.Task<bool> UpdatePlaceAsync(Assignment_Client.AdminServiceReference.Place place);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/DeletePlace", ReplyAction="http://tempuri.org/IAdminService/DeletePlaceResponse")]
        bool DeletePlace(int idP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/DeletePlace", ReplyAction="http://tempuri.org/IAdminService/DeletePlaceResponse")]
        System.Threading.Tasks.Task<bool> DeletePlaceAsync(int idP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetImageList", ReplyAction="http://tempuri.org/IAdminService/GetImageListResponse")]
        Assignment_Client.AdminServiceReference.Image[] GetImageList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetImageList", ReplyAction="http://tempuri.org/IAdminService/GetImageListResponse")]
        System.Threading.Tasks.Task<Assignment_Client.AdminServiceReference.Image[]> GetImageListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetImageListById", ReplyAction="http://tempuri.org/IAdminService/GetImageListByIdResponse")]
        Assignment_Client.AdminServiceReference.Image[] GetImageListById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetImageListById", ReplyAction="http://tempuri.org/IAdminService/GetImageListByIdResponse")]
        System.Threading.Tasks.Task<Assignment_Client.AdminServiceReference.Image[]> GetImageListByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/AddImage", ReplyAction="http://tempuri.org/IAdminService/AddImageResponse")]
        bool AddImage(Assignment_Client.AdminServiceReference.Image image);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/AddImage", ReplyAction="http://tempuri.org/IAdminService/AddImageResponse")]
        System.Threading.Tasks.Task<bool> AddImageAsync(Assignment_Client.AdminServiceReference.Image image);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/UpdateImage", ReplyAction="http://tempuri.org/IAdminService/UpdateImageResponse")]
        bool UpdateImage(Assignment_Client.AdminServiceReference.Image image);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/UpdateImage", ReplyAction="http://tempuri.org/IAdminService/UpdateImageResponse")]
        System.Threading.Tasks.Task<bool> UpdateImageAsync(Assignment_Client.AdminServiceReference.Image image);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/DeleteImage", ReplyAction="http://tempuri.org/IAdminService/DeleteImageResponse")]
        bool DeleteImage(int idI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/DeleteImage", ReplyAction="http://tempuri.org/IAdminService/DeleteImageResponse")]
        System.Threading.Tasks.Task<bool> DeleteImageAsync(int idI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetPlaceById", ReplyAction="http://tempuri.org/IAdminService/GetPlaceByIdResponse")]
        Assignment_Client.AdminServiceReference.Place GetPlaceById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAdminService/GetPlaceById", ReplyAction="http://tempuri.org/IAdminService/GetPlaceByIdResponse")]
        System.Threading.Tasks.Task<Assignment_Client.AdminServiceReference.Place> GetPlaceByIdAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAdminServiceChannel : Assignment_Client.AdminServiceReference.IAdminService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AdminServiceClient : System.ServiceModel.ClientBase<Assignment_Client.AdminServiceReference.IAdminService>, Assignment_Client.AdminServiceReference.IAdminService {
        
        public AdminServiceClient() {
        }
        
        public AdminServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AdminServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AdminServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AdminServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Assignment_Client.AdminServiceReference.Admin[] GetAdminList() {
            return base.Channel.GetAdminList();
        }
        
        public System.Threading.Tasks.Task<Assignment_Client.AdminServiceReference.Admin[]> GetAdminListAsync() {
            return base.Channel.GetAdminListAsync();
        }
        
        public bool AddAdmin(Assignment_Client.AdminServiceReference.Admin admin) {
            return base.Channel.AddAdmin(admin);
        }
        
        public System.Threading.Tasks.Task<bool> AddAdminAsync(Assignment_Client.AdminServiceReference.Admin admin) {
            return base.Channel.AddAdminAsync(admin);
        }
        
        public bool UpdateAdmin(Assignment_Client.AdminServiceReference.Admin admin) {
            return base.Channel.UpdateAdmin(admin);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAdminAsync(Assignment_Client.AdminServiceReference.Admin admin) {
            return base.Channel.UpdateAdminAsync(admin);
        }
        
        public bool DeleteAdmin(int idA) {
            return base.Channel.DeleteAdmin(idA);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAdminAsync(int idA) {
            return base.Channel.DeleteAdminAsync(idA);
        }
        
        public bool LoginAdmin(Assignment_Client.AdminServiceReference.Admin admin) {
            return base.Channel.LoginAdmin(admin);
        }
        
        public System.Threading.Tasks.Task<bool> LoginAdminAsync(Assignment_Client.AdminServiceReference.Admin admin) {
            return base.Channel.LoginAdminAsync(admin);
        }
        
        public Assignment_Client.AdminServiceReference.CategoryPlace[] GetCatePlaceList() {
            return base.Channel.GetCatePlaceList();
        }
        
        public System.Threading.Tasks.Task<Assignment_Client.AdminServiceReference.CategoryPlace[]> GetCatePlaceListAsync() {
            return base.Channel.GetCatePlaceListAsync();
        }
        
        public bool AddCatePlace(Assignment_Client.AdminServiceReference.CategoryPlace categoryPlace) {
            return base.Channel.AddCatePlace(categoryPlace);
        }
        
        public System.Threading.Tasks.Task<bool> AddCatePlaceAsync(Assignment_Client.AdminServiceReference.CategoryPlace categoryPlace) {
            return base.Channel.AddCatePlaceAsync(categoryPlace);
        }
        
        public bool UpdateCatePlace(Assignment_Client.AdminServiceReference.CategoryPlace categoryPlace) {
            return base.Channel.UpdateCatePlace(categoryPlace);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateCatePlaceAsync(Assignment_Client.AdminServiceReference.CategoryPlace categoryPlace) {
            return base.Channel.UpdateCatePlaceAsync(categoryPlace);
        }
        
        public bool DeleteCatePlace(int idCP) {
            return base.Channel.DeleteCatePlace(idCP);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteCatePlaceAsync(int idCP) {
            return base.Channel.DeleteCatePlaceAsync(idCP);
        }
        
        public Assignment_Client.AdminServiceReference.Place[] GetPlaceList() {
            return base.Channel.GetPlaceList();
        }
        
        public System.Threading.Tasks.Task<Assignment_Client.AdminServiceReference.Place[]> GetPlaceListAsync() {
            return base.Channel.GetPlaceListAsync();
        }
        
        public bool AddPlace(Assignment_Client.AdminServiceReference.Place place) {
            return base.Channel.AddPlace(place);
        }
        
        public System.Threading.Tasks.Task<bool> AddPlaceAsync(Assignment_Client.AdminServiceReference.Place place) {
            return base.Channel.AddPlaceAsync(place);
        }
        
        public bool UpdatePlace(Assignment_Client.AdminServiceReference.Place place) {
            return base.Channel.UpdatePlace(place);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePlaceAsync(Assignment_Client.AdminServiceReference.Place place) {
            return base.Channel.UpdatePlaceAsync(place);
        }
        
        public bool DeletePlace(int idP) {
            return base.Channel.DeletePlace(idP);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePlaceAsync(int idP) {
            return base.Channel.DeletePlaceAsync(idP);
        }
        
        public Assignment_Client.AdminServiceReference.Image[] GetImageList() {
            return base.Channel.GetImageList();
        }
        
        public System.Threading.Tasks.Task<Assignment_Client.AdminServiceReference.Image[]> GetImageListAsync() {
            return base.Channel.GetImageListAsync();
        }
        
        public Assignment_Client.AdminServiceReference.Image[] GetImageListById(int id) {
            return base.Channel.GetImageListById(id);
        }
        
        public System.Threading.Tasks.Task<Assignment_Client.AdminServiceReference.Image[]> GetImageListByIdAsync(int id) {
            return base.Channel.GetImageListByIdAsync(id);
        }
        
        public bool AddImage(Assignment_Client.AdminServiceReference.Image image) {
            return base.Channel.AddImage(image);
        }
        
        public System.Threading.Tasks.Task<bool> AddImageAsync(Assignment_Client.AdminServiceReference.Image image) {
            return base.Channel.AddImageAsync(image);
        }
        
        public bool UpdateImage(Assignment_Client.AdminServiceReference.Image image) {
            return base.Channel.UpdateImage(image);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateImageAsync(Assignment_Client.AdminServiceReference.Image image) {
            return base.Channel.UpdateImageAsync(image);
        }
        
        public bool DeleteImage(int idI) {
            return base.Channel.DeleteImage(idI);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteImageAsync(int idI) {
            return base.Channel.DeleteImageAsync(idI);
        }
        
        public Assignment_Client.AdminServiceReference.Place GetPlaceById(int id) {
            return base.Channel.GetPlaceById(id);
        }
        
        public System.Threading.Tasks.Task<Assignment_Client.AdminServiceReference.Place> GetPlaceByIdAsync(int id) {
            return base.Channel.GetPlaceByIdAsync(id);
        }
    }
}
